# -*- coding: utf-8 -*-
#
# This file is part of INSPIRE.
# Copyright (C) 2014-2017 CERN.
#
# INSPIRE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# INSPIRE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with INSPIRE. If not, see <http://www.gnu.org/licenses/>.
#
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization
# or submit itself to any jurisdiction.

"""Workflow for manual merging generic records."""

from __future__ import absolute_import, division, print_function

from invenio_db import db
from invenio_workflows import WorkflowEngine, engine, start, \
    workflow_object_class

from inspirehep.modules.workflows.tasks.manual_merging import ask_for_approval, \
    edit_metadata_and_store, merge_records, save_records_as_roots


class ManualMerge(object):
    name = 'MERGE'
    data_type = ''

    workflow = ([
        merge_records,
        ask_for_approval,
        # when resume here, we expect the workflow_object contains the
        # merged record accepted by a curator
        save_records_as_roots,
        edit_metadata_and_store,
    ])


def start_merger(head_id,
                 update_id,
                 current_user_id,
                 pid_type=None,
                 source_head=None,
                 source_updated=None):
    """
    Start a new ManualMerge workflow to merge two records manually.

    Args:
        head_id: the id of the first record to merge. This record is the one
            that will be updated with the new information.

        update_id: the id of the second record to merge. This record is the
            one that is going to be deleted and replaced by `head`.

        current_user_id: Id of the current user provided by the Flask app.
            Obtainable with `current_user.get_id()`.

        pid_type: type of the records to merge (e.g. lit, authors).

        source_head: if the record related to `head_id` hasn't an
            `acquisition_source` field, this value will populate such entry.

        source_updated: if the record related to `update_id` hasn't an
            `acquisition_source` field, this value will populate such entry.

    Returns:
        int: the current workflow object's id.
        InspireRecord: the merged record.
        list: the list of conflicts generated by the mering operation.
    """
    data = {
        'pid_type': pid_type or 'lit',
        'recid_head': head_id,
        'recid_update': update_id,
    }

    # FIXME: sync pid_type with data_type
    data_type = 'hep' if data['pid_type'] == 'lit' else 'authors'

    workflow_object = workflow_object_class.create(
        data=None,
        id_user=current_user_id,
        data_type=data_type
    )

    wf_id = workflow_object.id    # to retrieve it later
    workflow_object.extra_data.update(data)
    workflow_object.extra_data['head_source'] = source_head
    workflow_object.extra_data['update_source'] = source_updated

    workflow_object.save()

    start('manual_merge', object_id=wf_id)

    workflow_object = workflow_object_class.get(wf_id)
    merged = workflow_object.data
    conflicts = workflow_object.extra_data['conflicts']
    return workflow_object.id, merged, conflicts
