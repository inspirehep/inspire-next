# -*- coding: utf-8 -*-
#
# This file is part of INSPIRE.
# Copyright (C) 2016 CERN.
#
# INSPIRE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# INSPIRE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with INSPIRE. If not, see <http://www.gnu.org/licenses/>.
#
# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization
# or submit itself to any jurisdiction.

from __future__ import absolute_import, division, print_function

import pytest

from dojson.contrib.marc21.utils import create_record

from inspirehep.dojson.conferences import conferences
from inspirehep.dojson.utils import clean_record


def test_acronym_from_111__e():
    snippet = (
        '<datafield tag="111" ind1=" " ind2=" ">'
        '  <subfield code="a">16th Conference on Flavor Physics and CP Violation</subfield>'
        '  <subfield code="c">Hyderabad, INDIA</subfield>'
        '  <subfield code="e">FPCP 2018</subfield>'
        '  <subfield code="g">C18-07-09</subfield>'
        '  <subfield code="x">2018-07-09</subfield>'
        '  <subfield code="y">2018-07-12</subfield>'
        '</datafield>'
    )  # record/1468357

    expected = [
        'FPCP 2018',
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['acronym']


@pytest.mark.xfail(reason='tuple produced instead')
def test_acronym_from_111__e_e():
    snippet = (
        '<datafield tag="111" ind1=" " ind2=" ">'
        '  <subfield code="a">11th international vacuum congress and 7th international conference on solid surfaces</subfield>'
        '  <subfield code="c">Cologne, Germany</subfield>'
        '  <subfield code="d">25 â€“ 29 Sep 1989</subfield>'
        '  <subfield code="e">IVC-11</subfield>'
        '  <subfield code="e">ICSS-7</subfield>'
        '  <subfield code="g">C89-09-25.3</subfield>'
        '  <subfield code="x">1989-09-25</subfield>'
        '  <subfield code="y">1989-09-29</subfield>'
        '</datafield>'
    )  # record/1308774

    expected = [
        'IVC-11',
        'ICSS-7',
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['acronym']


def test_address_from_marcxml__111_c():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="c">Austin, Tex.</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'country_code': 'US',
            'state': 'US-TX',
            'original_address': 'Austin, Tex.'
        }
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_address_from_multiple_marcxml__111_c():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="c">Austin, Tex.</subfield>'
        '  </datafield>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="c">Den Haag, Nederlands</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'country_code': 'US',
            'state': 'US-TX',
            'original_address': 'Austin, Tex.'
        },
        {
            'country_code': 'NL',
            'original_address': 'Den Haag, Nederlands'
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_address_from_marcxml__111_multiple_c():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="c">Austin, Tex.</subfield>'
        '    <subfield code="c">Den Haag, Nederlands</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'country_code': 'US',
            'state': 'US-TX',
            'original_address': 'Austin, Tex.'
        },
        {
            'country_code': 'NL',
            'original_address': 'Den Haag, Nederlands'
        }
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_address_from_111__a_c_d_g_x_y():
    snippet = (
        '<datafield tag="111" ind1=" " ind2=" ">'
        '  <subfield code="a">Twentieth Power Modulator Symposium, 1992</subfield>'
        '  <subfield code="d">23-25 Jun 1992</subfield>'
        '  <subfield code="x">1992-06-23</subfield>'
        '  <subfield code="c">UNITED STATES</subfield>'
        '  <subfield code="g">C92-06-23.1</subfield>'
        '  <subfield code="y">1992-06-25</subfield>'
        '</datafield>'
    )

    expected = [
        {
            'country_code': 'US',
            'original_address': 'UNITED STATES',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_contact_details_from_marcxml_270_single_p_single_m():
    snippet = (
        '<record> '
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="m">lindner@mpi-hd.mpg.de</subfield>'
        '    <subfield code="p">Manfred Lindner</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'name': 'Manfred Lindner',
            'email': 'lindner@mpi-hd.mpg.de',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['contact_details']


def test_contact_details_from_marcxml_270_double_p_single_m():
    """Two people having same e-mail address. We do not support it."""
    snippet = (
        '<record> '
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="m">lindner@mpi-hd.mpg.de</subfield>'
        '    <subfield code="p">Manfred Lindner</subfield>'
        '    <subfield code="p">Boogeyman</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'email': 'lindner@mpi-hd.mpg.de',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['contact_details']


def test_contact_details_from_marcxml_270_single_p_double_m():
    """One person having two e-mail addresses. We do not support it."""
    snippet = (
        '<record> '
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="m">lindner@mpi-hd.mpg.de</subfield>'
        '    <subfield code="m">lindner@ecmrecords.com</subfield>'
        '    <subfield code="p">Manfred Lindner</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'name': 'Manfred Lindner'
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['contact_details']


def test_contact_details_from_multiple_marcxml_270():
    snippet = (
        '<record> '
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="m">lindner@mpi-hd.mpg.de</subfield>'
        '    <subfield code="p">Manfred Lindner</subfield>'
        '  </datafield>'
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="p">Wynton Marsalis</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'name': 'Manfred Lindner',
            'email': 'lindner@mpi-hd.mpg.de',
        },
        {
            'name': 'Wynton Marsalis',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['contact_details']


def test_address_from_270__b():
    snippet = (
        '<record>'
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="b">British Columbia</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'country_code': 'CA',
            'original_address': 'British Columbia',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_address_from_111__a_c_e_g_x_y_and_270__b():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="a">2017 International Workshop on Baryon and Lepton Number Violation: From the Cosmos to the LHC</subfield>'
        '    <subfield code="c">Cleveland, Ohio, USA</subfield>'
        '    <subfield code="e">BLV 2017</subfield>'
        '    <subfield code="g">C17-05-15</subfield>'
        '    <subfield code="x">2017-05-15</subfield>'
        '    <subfield code="y">2017-05-18</subfield>'
        '  </datafield>'
        '  <datafield tag="270" ind1=" " ind2=" ">'
        '    <subfield code="b">Case Western Reserve University</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/1353313

    expected = [
        {
            'original_address': 'Cleveland, Ohio, USA',
            'country_code': 'US',
            'state': 'US-OH',
        },
        {
            'original_address': 'Case Western Reserve University',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['address']


def test_keywords_from_multiple_6531_a_9():
    snippet = (
        '<record>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">Flavour</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">Flavor</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">Symmetries</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">Neutrino</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">LHC</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">Elementary particle physics</subfield>'
        '  </datafield>'
        '  <datafield tag="653" ind1="1" ind2=" ">'
        '    <subfield code="9">submitter</subfield>'
        '    <subfield code="a">High energy physics</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'source': 'submitter',
            'value': 'Flavour',
        },
        {
            'source': 'submitter',
            'value': 'Flavor',
        },
        {
            'source': 'submitter',
            'value': 'Symmetries',
        },
        {
            'source': 'submitter',
            'value': 'Neutrino',
        },
        {
            'source': 'submitter',
            'value': 'LHC',
        },
        {
            'source': 'submitter',
            'value': 'Elementary particle physics',
        },
        {
            'source': 'submitter',
            'value': 'High energy physics',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['keywords']


def test_titles_from_marcxml_111():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="a">NASA Laboratory Astrophysics Workshop</subfield>'
        '    <subfield code="d">14-16 Feb 2006</subfield>'
        '    <subfield code="x">2006-02-14</subfield>'
        '    <subfield code="c">Las Vegas, Nevada</subfield>'
        '    <subfield code="g">C06-02-14</subfield>'
        '    <subfield code="y">2006-02-16</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'title': 'NASA Laboratory Astrophysics Workshop',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['titles']


def test_titles_from_marcxml_111_with_two_a():
    snippet = (
        '<record>'
        '  <datafield tag="111" ind1=" " ind2=" ">'
        '    <subfield code="a">ConfÃ©rence IAP 2013</subfield>'
        '    <subfield code="a">75 Anniversary Conference</subfield>'
        '    <subfield code="b">The origin of the Hubble sequence</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'title': u'ConfÃ©rence IAP 2013',
            'subtitle': 'The origin of the Hubble sequence',
        },
        {
            'title': '75 Anniversary Conference',
            'subtitle': 'The origin of the Hubble sequence',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['titles']


def test_alternative_titles_from_marcxml_711():
    snippet = (
        '<record>'
        '  <datafield tag="711" ind1=" " ind2=" ">'
        '    <subfield code="a">GCACSE16</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'title': 'GCACSE16',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['alternative_titles']


def test_alternative_titles_from_multiple_marcxml_711():
    snippet = (
        '<record>'
        '  <datafield tag="711" ind1=" " ind2=" ">'
        '    <subfield code="a">GCACSE16</subfield>'
        '  </datafield>'
        '  <datafield tag="711" ind1=" " ind2=" ">'
        '    <subfield code="a">GCACSE 2016</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'title': 'GCACSE16',
        },
        {
            'title': 'GCACSE 2016',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['alternative_titles']


def test_alternative_titles_marcxml_711_with_b():
    snippet = (
        '<record>'
        '  <datafield tag="711" ind1=" " ind2=" ">'
        '    <subfield code="a">XX Riunione Nazionale di Elettromagnetismo</subfield>'
        '    <subfield code="b">Padova</subfield>'
        '  </datafield>'
        '</record>'
    )

    expected = [
        {
            'title': 'XX Riunione Nazionale di Elettromagnetismo',
            'searchable_title': 'Padova',
        },
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['alternative_titles']


def test_note_from__500_a():
    snippet = (
        '<datafield tag="500" ind1=" " ind2=" ">'
        '  <subfield code="a">Same conf. as Kyoto 1975: none in intervening years</subfield>'
        '</datafield>'
    )  # record/963579

    expected = [
        'Same conf. as Kyoto 1975: none in intervening years',
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['note']


def test_note_from__double_500_a():
    snippet = (
        '<record>'
        '  <datafield tag="500" ind1=" " ind2=" ">'
        '    <subfield code="a">Marion White, PhD (Argonne) Conference Chair Vladimir Shiltsev, PhD (FNAL) Scientific Program Chair Maria Power (Argonne) Conference Editor/Scientific Secretariat</subfield>'
        '  </datafield>'
        '  <datafield tag="500" ind1=" " ind2=" ">'
        '    <subfield code="a">Will be published in: JACoW</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/1445071

    expected = [
        'Marion White, PhD (Argonne) Conference Chair Vladimir Shiltsev, PhD (FNAL) Scientific Program Chair Maria Power (Argonne) Conference Editor/Scientific Secretariat',
        'Will be published in: JACoW',
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['note']


@pytest.mark.xfail(reason='tuple is not unpacked')
def test_note_from_500__multiple_a():
    snippet = (
        '<datafield tag="500" ind1=" " ind2=" ">'
        '  <subfield code="a">(BSS2011) Trends in Modern Physics: 19 - 21 August, 2011</subfield>'
        '  <subfield code="a">(BS2011) Cosmology and Particle Physics Beyond the Standard Models: 21-17 August, 2011</subfield>'
        '  <subfield code="a">(JW2011) Scientific and Human Legacy of Julius Wess: 27-28 August, 2011</subfield>'
        '  <subfield code="a">(BW2011) Particle Physcs from TeV to Plank Scale: 28 August - 1 September, 2011</subfield>'
        '</datafield>'
    )

    expected = [
        '(BSS2011) Trends in Modern Physics: 19 - 21 August, 2011',
        '(BS2011) Cosmology and Particle Physics Beyond the Standard Models: 21-17 August, 2011',
        '(JW2011) Scientific and Human Legacy of Julius Wess: 27-28 August, 2011',
        '(BW2011) Particle Physcs from TeV to Plank Scale: 28 August - 1 September, 2011',
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['note']


def test_series_from_411__a():
    snippet = (
        '<datafield tag="411" ind1=" " ind2=" ">'
        '  <subfield code="a">DPF Series</subfield>'
        '</datafield>'
    )  # record/1430017

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'DPF Series'
        },
    ]
    assert result['series'] == expected


def test_series_number_from_411__n():
    snippet = (
        '<datafield tag="411" ind1=" " ind2=" ">'
        '  <subfield code="n">7</subfield>'
        '</datafield>'
    )  # record/1447029

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'number': 7
        },
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_411__a_n():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">FPCP</subfield>'
        '    <subfield code="n">16</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/1468357

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'FPCP',
            'number': 16
        },
    ]
    assert result['series'] ==  expected


def test_series_and_series_number_from_411__a_n_and_411_a():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">Rencontres de Moriond</subfield>'
        '    <subfield code="n">51</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">Moriond EW</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/1404073

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'Rencontres de Moriond',
            'number': 51
        },
        {
            'name': 'Moriond EW'
        },
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_411__a_n_and_411_n():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">SSI</subfield>'
        '    <subfield code="n">x</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="n">2</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/963769

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'SSI',
            'number': 2
        }
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_double_411_a_n():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">ICHEP</subfield>'
        '    <subfield code="n">5</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">Rochester</subfield>'
        '    <subfield code="n">5</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/974856

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'ICHEP',
            'number': 5
        },
        {
            'name': 'Rochester',
            'number': 5
        }
    ]
    assert result['series'] == expected


@pytest.mark.xfail(reason='No support in DoJSON for post-processing functions')
def test_series_and_series_number_from_411_n_and_411_a_n():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="n">3</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">WIN</subfield>'
        '    <subfield code="n">3</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/963914

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'WIN',
            'number': 3
        }
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_411_n_and_411_a():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="n">3</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">Gordon</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/972145

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'Gordon',
            'number': 3
        }
    ]
    assert result['series'] == expected


def test_series_from_double_411__a():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">SNPS</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">NSS</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/964177

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'SNPS',
        },
        {
            'name': 'NSS'
        }
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_411_a_and_411_a_n():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">CEC</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">ICMC</subfield>'
        '    <subfield code="n">2</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/964448

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'CEC',
        },
        {
            'name': 'ICMC',
            'number': 2
        }
    ]
    assert result['series'] == expected


def test_series_and_series_number_from_411__a_n_and_411_a():
    snippet = (
        '<record>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '    <subfield code="a">EDS</subfield>'
        '    <subfield code="n">13</subfield>'
        '  </datafield>'
        '  <datafield tag="411" ind1=" " ind2=" ">'
        '     <subfield code="a">BLOIS</subfield>'
        '  </datafield>'
        '</record>'
    )  # record/980229

    result = clean_record(conferences.do(create_record(snippet)))

    expected = [
        {
            'name': 'EDS',
            'number': 13
        },
        {
            'name': 'BLOIS'
        }
    ]
    assert result['series'] == expected


def test_short_description_from_520__a():
    snippet = (
        '<datafield tag="520" ind1=" " ind2=" ">'
        '  <subfield code="a">QNP2015 is the Seventh International Conference on Quarks and Nuclear Physics. It is anticipated that QCD practitioners, both experimentalists and theorists, will gather at the Universidad TÃ©cnica Federico Santa MarÃ­a, in ValparaÃ­so, Chile during the week of March 2, 2015 to present and discuss the latest advances in the field. The following topics will be covered: quarks and gluons content of nucleons and nuclei, hadron spectroscopy, non-perturbative methods in QCD (including lattice calculations), effective field theories, nuclear matter under extreme conditions and nuclear medium. Participants should register at the conference website https://indico.cern.ch/event/304663/</subfield>'
        '</datafield>'
    )  # record/1326067

    expected = [
        {
            'value': u'QNP2015 is the Seventh International Conference on Quarks and Nuclear Physics. It is anticipated that QCD practitioners, both experimentalists and theorists, will gather at the Universidad TÃ©cnica Federico Santa MarÃ­a, in ValparaÃ­so, Chile during the week of March 2, 2015 to present and discuss the latest advances in the field. The following topics will be covered: quarks and gluons content of nucleons and nuclei, hadron spectroscopy, non-perturbative methods in QCD (including lattice calculations), effective field theories, nuclear matter under extreme conditions and nuclear medium. Participants should register at the conference website https://indico.cern.ch/event/304663/',
        }
    ]
    result = clean_record(conferences.do(create_record(snippet)))

    assert expected == result['short_description']
