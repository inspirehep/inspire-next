# -*- coding: utf-8 -*-
## This file is part of INSPIRE.
## Copyright (C) 2014, 2015 CERN.
##
## Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

@override
name:
    """Contains name information.

    Please note that MARC field for an author's name is splitted into two
    fields, `last_name` and `first_name`. The same situation occurs for
    the date fields, in JSON it is splitted into `birth_year` and `death_year`.

    Admissible string values for `100__g`:
    + active
    + departed
    + retired
    + deceased

    The only accepted value in `100__c` field is:
    + Sir

    Values accepted for `100__b:
    + Jr.
    + Sr.
    + roman numbers (like VII)

    Example:
    +---------+---------------------+
    | 100__a  | Smith, John         |
    +---------+---------------------+
    | 100__b  | Jr.                 |
    +---------+---------------------+
    | 100__c  | Sir                 |
    +---------+---------------------+
    | 100__g  | active              |
    +---------+---------------------+
    | 100__q  | Johnny Smith        |
    +---------+---------------------+
    """

    schema:
        {'name': {'type': 'dict', 'required': True,
         'schema': {'last': {'type': 'string', 'empty': False},
                    'first': {'type': 'string', 'empty': False},
                    'numeration': {'type': 'string', 'nullable': True,
                                   'regex': __import__('flask').current_app.config['AUTHORS_NAME_NUMERATIONS']},
                    'title': {'type': 'string', 'nullable': True,
                              'allowed': __import__('flask').current_app.config['AUTHORS_NAME_TITLES']},
                    'status': {'type': 'string', 'nullable': True,
                               'allowed': __import__('flask').current_app.config['AUTHORS_NAME_STATUSES']},
                    'preferred_name': {'type': 'string', 'nullable': True,
                                       'empty': False}}}}
    creator:
        @only_if_master_value(value["a"])
        marc, "100__", {'last': util_split(value['a'], ',', 0),
                        'first': util_split(value['a'], ',', 1),
                        'numeration': value['b'],
                        'title': value['c'],
                        'status': value['g'],
                        'preferred_name': value['q']}
    producer:
        json_for_marc(), {"100__a": "last + ', ' + first",
                          "100__b": "numeration", "100__c": "title",
                          "100__g": "status", "100__q": "preferred_name"}

other_names:
    """Contains other variation of names.

    Usually a different form of writing the primary name.

    TO DO: define a type inside list
    """
    schema:
        {'other_names': {'type': 'list', 'force': True}}
    creator:
        marc, "400__", value['a']
    producer:
        json_for_marc(), {"400__a": ""}

previous_names:
    """Contains a previous name.

    For example, it can be a maiden's name.

    TO DO: define a type inside list
    """
    schema:
        {'previous_name': {'type': 'list', 'force': True}}
    producer:
        json_for_marc(), {"400__a": "", "400__w": "a"}

native_name:
    """Stores name in native form."""
    schema:
        {'native_name': {'type': 'string'}}
    creator:
        marc, "880__", value['a']
    producer:
        json_for_marc(), {"880__a": ""}

dates:
    """Stores birth and death dates.

    Example:
    +---------+---------------------+
    | 100__d  | 1943-2001           |
    +---------+---------------------+
    """
    schema:
        {'dates': {'type': 'dict',
         'schema': {'birth': {'type': 'integer', 'nullable': True,
                              'min': __import__('flask').current_app.config['INSPIRE_YEAR_MIN'],
                              'max': __import__('flask').current_app.config['INSPIRE_YEAR_MAX']
                              },
                    'death': {'type': 'integer', 'nullable': True,
                              'min': __import__('flask').current_app.config['INSPIRE_YEAR_MIN'],
                              'max': __import__('flask').current_app.config['INSPIRE_YEAR_MAX']}}}}
    creator:
        @only_if_master_value(value["d"])
        marc, "100__", {'birth': int_util_split(value['d'], '-', 0),
                        'death': int_util_split(value['d'], '-', 1)}
    producer:
        json_for_marc(), {"100__d": "birth + '-' + death"}

emails:
    """Contains email address.

    Must be in form of `<name>@<domain>.<ending>`.

    Example:
    +---------+---------------------+
    | 371__m  | pony@mail.com       |
    +---------+---------------------+
    | 371__z  | current             |
    +---------+---------------------+
    """
    derived:
        @parse_first('_public_emails', '_private_current_emails',
                     '_private_old_emails')
        @only_if('_public_emails' in self or '_private_current_emails' in self
                 or '_private_old_emails' in self)
        sum_emails(self, '_public_emails', '_private_current_emails', '_private_old_emails')

_public_emails:
    schema:
        {'_public_emails': {'type': 'list', 'force': True, 'items': {
         'value': {'type': 'string', 'empty': False, 'required': True,
                           'regex': __import__('flask').current_app.config['INSPIRE_EMAIL_REGEX']},
         'current': {'type': 'string', 'empty': False,
                             'nullable': True,
                             'regex': __import__('flask').current_app.config['AUTHORS_EMAIL_STATUS']
                     }}}}
    creator:
        @only_if_master_value(not value["a"])
        marc, "371__", {'value': value['m'],
                        'current': value['z']}
    producer:
        json_for_marc(), {"371__m": "value",
                          "371__z": "current"}

_private_current_emails:
    schema:
        {'_private_current_emails': {'type': 'list', 'force': True, 'items': {
         'value': {'type': 'string', 'empty': False,
                   'regex': __import__('flask').current_app.config['INSPIRE_EMAIL_REGEX']}}}}
    creator:
        @only_if_master_value(value["m"])
        marc, "595__", {'value': value['m']}
    producer:
        json_for_marc(), {"595__m": "value"}

_private_old_emails:
    schema:
        {'_private_old_emails': {'type': 'list', 'force': True, 'items': {
         'value': {'type': 'string', 'empty': False,
                   'regex': __import__('flask').current_app.config['INSPIRE_EMAIL_REGEX']}}}}
    creator:
        @only_if_master_value(value["o"])
        marc, "595__", {'value': value['o']}
    producer:
        json_for_marc(), {"595__o": "value"}

positions:
    """Contains position information.

    Accepted values for 371__r:
    + senior
    + junior
    + staff
    + visitor
    + postdoc
    + phd
    + masters
    + undergrad

    In dates field you can put months in addition to years. In this case you
    have to follow the convention `month-year`. For example: `10-2012`.

    Example of whole field:

    +---------+---------------------+
    | 371__a  | CERN                |
    +---------+---------------------+
    | 371__m  | pony@cern.ch        |
    +---------+---------------------+
    | 371__o  | seriouse@mail.com   |
    +---------+---------------------+
    | 371__r  | senior              |
    +---------+---------------------+
    | 371__s  | 12-1943             |
    +---------+---------------------+
    | 371__t  | 1966                |
    +---------+---------------------+

    In JSON stored as a list of dictionaries.

    TO DO: switch to link to the record.
    """

    schema:
        {'positions': {'type': 'list', 'force': True, 'items':
         {'type': 'dict', 'schema': {
          'institution': {'type': 'string'},
          'rank': {'type': 'string', 'nullable': True,
                   'allowed': __import__('flask').current_app.config['AUTHORS_AFFILIATION_RANKS']},
          'start_date': {'type': 'string', 'nullable': True,
                         'regex': __import__('flask').current_app.config['INSPIRE_DATE_REGEX']},
          'end_date': {'type': 'string', 'nullable': True,
                       'regex': __import__('flask').current_app.config['INSPIRE_DATE_REGEX']},
          'email': {'type': 'string', 'nullable': True,
                    'regex': __import__('flask').current_app.config['INSPIRE_EMAIL_REGEX']},
          'old_email': {'type': 'string', 'nullable': True,
                        'regex': __import__('flask').current_app.config['INSPIRE_EMAIL_REGEX']},
          'status': {'type': 'string', 'nullable': True,
                     'allowed': __import__('flask').current_app.config['AUTHORS_AFFILIATION_STATUS']}
          }}}}
    creator:
        @only_if_master_value(value["a"])
        marc, "371__", {'institution': value['a'], 'rank': value['r'],
                        'start_date': value['s'], 'end_date': value['t'],
                        'email': value['m'], 'old_email': value['o'],
                        'status': value['z']}
    producer:
        json_for_marc(), {"371__a": "institution", "371__r": "rank",
                          "371__m": "email", "371__o": "old_email",
                          "371__s": "start_date", "371__t": "end_date",
                          "371__z": "status"}

field_categories:
    """Contains field category.

    Example:

    +---------+---------------------+
    | 65017a  | comp                |
    +---------+---------------------+
    | 650172  | arxiv               |
    +---------+---------------------+

    In JSON stored as a list of dictionaries.
    """
    schema:
        {'field_categories': {'type': 'list', 'force': True, 'items': {
         'name': {'type': 'string',
                  'allowed': __import__('flask').current_app.config['INSPIRE_ARXIV_CATEGORIES']},
         'type': {'type': 'string',
                  'allowed': __import__('flask').current_app.config['INSPIRE_CATEGORIES_SOURCES']}
         }}}
    creator:
        marc, "65017", {'name': value['a'], 'type': value['2']}
    producer:
        json_for_marc(), {"65017a": "name", "650172": "type"}

source:
    """Contains information about source of the record.

    Example:

    +---------+---------------------+
    | 670__a  | webform             |
    +---------+---------------------+

    In JSON stored as a dictionary.
    """
    schema:
        {'source': {'type': 'dict', 'schema': {
            'name': {'type': 'string', 'nullable': True, 'empty': False},
            'date_verified': {'type': 'string', 'nullable': True,
                              'regex': __import__('flask').current_app.config['INSPIRE_DATE_REGEX']}
        }}}
    creator:
        marc, "670__", {'name': value['a'], 'date_verified': value['d']}
    producer:
        json_for_marc(), {"670__a": "name", "670__d": "date_verified"}

prizes:
    """Contains prize name.

    In JSON stored as a list of strings.

    TO DO: define a type inside list
    """
    schema:
        {'prizes': {'type': 'list', 'force': True}}
    creator:
        marc, "678__", value['a']
    producer:
        json_for_marc(), {"678__a": ""}

_public_note:
    schema:
        {'_public_note': {'type': 'string'}}
    creator:
        marc, "680__", value['i']
    producer:
        json_for_marc(), {"680__i": ""}

_private_note:
    schema:
        {'_private_note': {'type': 'string'}}
    creator:
        @only_if_master_value(value["a"])
        marc, "595__", value['a']
    producer:
        json_for_marc(), {"595__a": ""}

_curators_note:
    schema:
        {'_curators_note': {'type': 'string'}}
    creator:
        marc, "667__", value['a']
    producer:
        json_for_marc(), {"667__a": ""}

author_note:
    """Contains public note."""
    derived:
        @only_if('_public_note' in self or '_private_note' in self or '_curators_note' in self)
        @parse_first('_public_note', '_private_note', '_curators_note')
        sum_notes(self, '_public_note', '_private_note', '_curators_note')

experiments:
    """Contains information about experiments.

    Currently the ``id`` subfield stores the name of the experiment. It should
    be moved to storing id of the experiment as soon as experiments are
    available as records.

    TO DO: move to records
    """
    schema:
        {'experiments': {'type': 'list', 'force': True, 'items': {
         'id': {'type': 'string'},
         'start_year': {'type': 'integer', 'nullable': True,
                        'min': __import__('flask').current_app.config['INSPIRE_YEAR_MIN'],
                        'max': __import__('flask').current_app.config['INSPIRE_YEAR_MAX']},
         'end_year': {'type': 'integer', 'nullable': True,
                      'min': __import__('flask').current_app.config['INSPIRE_YEAR_MIN'],
                      'max': __import__('flask').current_app.config['INSPIRE_YEAR_MAX']},
         'status': {'type': 'string', 'nullable': True,
                    'allowed': __import__('flask').current_app.config['AUTHORS_EXPERIMENT_STATUS']}
         }}}
    creator:
        marc, "693__", {'id': value['e'], 'start_year': to_int(value['s']),
                        'end_year': to_int(value['d']), 'status': value['z']}
    producer:
        json_for_marc(), {"693__e": "id", "693__s": "start_year",
                          "693__d": "end_year", "693__z": "status"}


phd_advisors:
    """Contains a links to the advisors in form of record ids.

    FIX ME: add a way to produce from link
    """
    schema:
        {'phd_advisors': {'type': 'list', 'force': True, 'items': {
         'link': {'type': 'string', 'nullable': True},
         'name': {'type': 'string', 'nullable': True},
         'id': {'type': 'string', 'nullable': True}
         }}}
    creator:
        marc, "701__", {'id': value["i"], 'name': value["a"]}
    producer:
        json_for_marc(), {"701__a": "name", "701__i": "id"}

conferences:
    """Contains information about conferentions attended.

    TO DO: creator and producer. Move to records.
    """
    schema:
        {'conferences': {'type': 'list', 'force': True}}

urls:
    """Contains a link to author's website.

    In JSON stored as a list of strings.

    TO DO: define a type and add regex for the elements of the array.
    """
    schema:
        {'urls': {'type': 'list', 'force': True, 'items': {
         'value': {'type': 'string', 'required': True,
                   'allowed': __import__('flask').current_app.config['INSPIRE_URL_REGEX']},
         'description': {'type': 'string', 'nullable': True}
         }}}
    creator:
        marc, "8564_", {'value': value['u'], 'description': value['y']}
    producer:
        json_for_marc(), {"8564_u": "value", "8564_y": "description"}

date_added:
    """The date when the record was submitted in form yyyy-mm-dd."""
    schema:
        {'date_added': {'type': 'string',
                        'regex': __import__('flask').current_app.config['INSPIRE_DATE_REGEX']}}
    creator:
        @only_if_master_value(value["x"])
        marc, "961__", value['x']
    producer:
        json_for_marc(), {"961__x": ""}

date_updated:
    """The latest date when the record was updated in form yyyy-mm-dd."""
    schema:
        {'date_updated': {'type': 'string',
                          'regex': __import__('flask').current_app.config['INSPIRE_DATE_REGEX']}}
    creator:
        @only_if_master_value(value["c"])
        marc, "961__", value['c']
    producer:
        json_for_marc(), {"961__c": ""}
